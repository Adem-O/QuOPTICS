{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d6c7d917",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from qutip import *\n",
    "from ipywidgets import interactive, FloatSlider, IntSlider, Checkbox, VBox, HBox, Button, Output, HTML\n",
    "from IPython.display import display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "94b86047",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Plot_HO():\n",
    "    # Initialize the figure outside the simulation function\n",
    "    fig, ax = plt.subplots(figsize=(10, 8), layout='tight')\n",
    "\n",
    "    # Add individual checkboxes for controlling transparency for each plot\n",
    "    base_alpha_checkbox = Checkbox(value=False, description=\"Hide D-H-O\")\n",
    "    driving_alpha_checkbox = Checkbox(value=False, description=\"Hide driving\")\n",
    "    kerr_alpha_checkbox = Checkbox(value=False, description=\"Hide Kerr\")\n",
    "\n",
    "    # Add a loading label\n",
    "    loading_label = HTML(\"<h3 style='color: blue;'>Loading...</h3>\")\n",
    "    loading_label.layout.display = 'none'  # Initially hidden\n",
    "\n",
    "    # Create sliders\n",
    "    N_slider = IntSlider(value=30, min=1, max=100, description='N:')\n",
    "    n_th_a_slider = FloatSlider(value=4, min=0, max=10, step=0.1, description='n_th_a:')\n",
    "    psi0_val_slider = IntSlider(value=9, min=0, max=30, description='psi0_val:')\n",
    "    kappa_slider = FloatSlider(value=0.03, min=0.0, max=1.0, step=0.01, description='kappa:')\n",
    "    Omega_slider = FloatSlider(value=0.0, min=0.0, max=5.0, step=0.1, description='Omega:')\n",
    "    k_slider = FloatSlider(value=0.0, min=0.0, max=5.0, step=0.1, description='k:')\n",
    "\n",
    "    # Create checkboxes for driving and Kerr effects\n",
    "    driving_checkbox = Checkbox(value=False, description=\"Include Driving\")\n",
    "    kerr_checkbox = Checkbox(value=False, description=\"Include Kerr\")\n",
    "\n",
    "    # Create the submit button\n",
    "    submit_button = Button(description='Run Simulation')\n",
    "\n",
    "    # Function to simulate and update plot\n",
    "    def simulate_on_submit(N=30, n_th_a=4, psi0_val=9, kappa=0.03, driving=False, kerr=False, Omega=0.0, k=0.0, base_alpha=False, driving_alpha=False, kerr_alpha=False):\n",
    "        ax.clear()  # Clear the previous plot\n",
    "\n",
    "        a = destroy(N)\n",
    "\n",
    "        # Base Hamiltonian\n",
    "        H0 = a.dag() * a\n",
    "        psi0 = basis(N, psi0_val)\n",
    "\n",
    "        # Collapse operators\n",
    "        c_op_list = []\n",
    "        rate = kappa * (1 + n_th_a)\n",
    "        if rate > 0.0:\n",
    "            c_op_list.append(np.sqrt(rate) * a)  # Decay operators\n",
    "        rate = kappa * n_th_a\n",
    "        if rate > 0.0:\n",
    "            c_op_list.append(np.sqrt(rate) * a.dag())  # Excitation operators\n",
    "\n",
    "        # Set alpha values based on checkboxes\n",
    "        base_alpha = 0.3 if base_alpha_checkbox.value else 1.0\n",
    "        driving_alpha = 0.3 if driving_alpha_checkbox.value else 1.0\n",
    "        kerr_alpha = 0.3 if kerr_alpha_checkbox.value else 1.0\n",
    "\n",
    "        # Simulate for base Hamiltonian (H0)\n",
    "        tlist = np.linspace(0, 100, 100)  # Shorter time range for faster updates\n",
    "        opts = {'store_states': False}\n",
    "        medata_base = mesolve(H0, psi0, tlist, c_op_list, [a.dag() * a], options=opts)\n",
    "\n",
    "        # Plot for base Hamiltonian\n",
    "        ax.plot(tlist, medata_base.expect[0], lw=2, label=r'$\\langle n(t) \\rangle$ (D-H-O)', alpha=base_alpha)\n",
    "\n",
    "        # If driving is enabled, add the driving term and simulate\n",
    "        if driving:\n",
    "            H1 = Omega * (a.dag() + a)\n",
    "            H_with_driving = H0 + H1\n",
    "            medata_driving = mesolve(H_with_driving, psi0, tlist, c_op_list, [a.dag() * a], options=opts)\n",
    "            ax.plot(tlist, medata_driving.expect[0], lw=2, linestyle='--', label=r'$\\langle n(t) \\rangle$ (D-H-O w/ Driving)', alpha=driving_alpha)\n",
    "\n",
    "        # If Kerr nonlinearity is enabled, add the Kerr term and simulate\n",
    "        if kerr:\n",
    "            H2 = k * (a.dag() * a * a.dag() * a)\n",
    "            H_with_kerr = H0 + (H1 if driving else 0) + H2\n",
    "            medata_kerr = mesolve(H_with_kerr, psi0, tlist, c_op_list, [a.dag() * a], options=opts)\n",
    "            ax.plot(tlist, medata_kerr.expect[0], lw=2, linestyle=':', label=r'$\\langle n(t) \\rangle$ (D-D-H-O w/Kerr)', alpha=kerr_alpha)\n",
    "\n",
    "        # Set up the plot\n",
    "        ax.set_xlabel('Time', fontsize=14)\n",
    "        ax.set_ylabel(r'$\\langle n \\rangle$', fontsize=14)\n",
    "        ax.set_title('Evolution of Photon Number Expectation Value', fontsize=16)\n",
    "\n",
    "        # Move the legend to the right side\n",
    "        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n",
    "\n",
    "        # Redraw the updated plot\n",
    "        plt.draw()\n",
    "\n",
    "    # Function to be called when the button is clicked\n",
    "    def on_submit(b):\n",
    "        submit_button.disabled = True  # Disable the submit button\n",
    "        loading_label.layout.display = 'block'  # Show loading label\n",
    "        simulate_on_submit(N_slider.value, n_th_a_slider.value, psi0_val_slider.value, \n",
    "                           kappa_slider.value, driving_checkbox.value, kerr_checkbox.value, \n",
    "                           Omega_slider.value, k_slider.value, \n",
    "                           base_alpha_checkbox.value, driving_alpha_checkbox.value, kerr_alpha_checkbox.value)\n",
    "        loading_label.layout.display = 'none'  # Hide loading label\n",
    "        submit_button.disabled = False  # Re-enable the submit button\n",
    "\n",
    "    # Attach the function to the button\n",
    "    submit_button.on_click(on_submit)\n",
    "\n",
    "    # Arrange widgets in a box, include the transparency checkboxes\n",
    "    controls_box = VBox([N_slider, n_th_a_slider, psi0_val_slider, kappa_slider, \n",
    "                         HBox([driving_checkbox, Omega_slider]), \n",
    "                         HBox([kerr_checkbox, k_slider]), \n",
    "                         base_alpha_checkbox, driving_alpha_checkbox, kerr_alpha_checkbox, \n",
    "                         submit_button, loading_label])  # Include the loading label in controls\n",
    "\n",
    "    # Display controls\n",
    "    display(controls_box)\n",
    "\n",
    "    # Call the simulation function once to show the initial plot\n",
    "    simulate_on_submit(N_slider.value, n_th_a_slider.value, psi0_val_slider.value, \n",
    "                       kappa_slider.value, driving_checkbox.value, kerr_checkbox.value, \n",
    "                       Omega_slider.value, k_slider.value, \n",
    "                       base_alpha_checkbox.value, driving_alpha_checkbox.value, kerr_alpha_checkbox.value)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "panel-cell-order": [
   "af7ebacf-de81-4417-a588-e3d427838f77"
  ]
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
